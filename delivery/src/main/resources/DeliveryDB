CREATE DATABASE DeliveryDB;

CREATE TABLE courierInfo
(courier_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(35) NOT NULL,
phone_number VARCHAR(20) NOT NULL,
delivery_type VARCHAR(5) NOT NULL);

CREATE TABLE customers
(customer_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
first_name VARCHAR(30) NOT NULL,
last_name VARCHAR(35) NOT NULL,
phone_number VARCHAR(20) NOT NULL,
district VARCHAR(15) NOT NULL,
street VARCHAR(25) NOT NULL,
house INT NOT NULL,
apartment INT NOT NULL);

CREATE TABLE deliveryList
(delivery_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
order_id INT UNIQUE NOT NULL,
courier_id INT NOT NULL,
date_arrived TIMESTAMP UNIQUE,  # the time when couriers bring ordes to clients
taken VARCHAR(3) NOT NULL,  # it means whether a client's taken its order or not
payment_method VARCHAR(4),
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (courier_id) REFERENCES courier_info(courier_id));

CREATE TABLE orders
(order_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
customer_id INT NOT NULL,
date_get TIMESTAMP NOT NULL,  # the time when orders are gotten from customers
FOREIGN KEY (customer_id) REFERENCES customers (customer_id));

CREATE TABLE ordersProducts
(order_id INT NOT NULL,
product_id INT NOT NULL,
quantity INT NOT NULL,
PRIMARY KEY (order_id, product_id),
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (product_id) REFERENCES products(product_id));

CREATE TABLE products
(product_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
menu_name VARCHAR(80) NOT NULL,
price FLOAT NOT NULL);

CREATE TABLE shops
(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
address VARCHAR(30) NOT NULL,
tel VARCHAR(35) NOT NULL,
site VARCHAR(20) NOT NULL,
email VARCHAR(5) NOT NULL);

CREATE TABLE companies
(companyId  INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
companyName VARCHAR(45) NOT NULL,
companyContactName VARCHAR(45) NOT NULL,
companyEmailAddress VARCHAR(45) NOT NULL,
companyPhone VARCHAR(45) NOT NULL,
otherDeatails VARCHAR(45) NOT NULL);

CREATE TABLE productType
(id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
name VARCHAR(45) NOT NULL);

CREATE TABLE actualOrders
(actualOrdersId  INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
actualOrdersDate VARCHAR(45) NOT NULL,
otherDeatails VARCHAR(45) NOT NULL);

CREATE TABLE regularOrders
(regularOrdersId  INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
otherDeatails VARCHAR(45) NOT NULL);

CREATE TABLE typeOfTransport
(typeOfTransportId  INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
typeOfTransportLicenceNumber VARCHAR(45) NOT NULL,
typeOfTransportDeatails VARCHAR(45) NOT NULL);

CREATE TABLE deliveryLocations
(locationId  INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
locationAddress VARCHAR(45) NOT NULL,
locationName VARCHAR(45) NOT NULL,
otherLocationDeatails VARCHAR(45) NOT NULL);

CREATE TABLE supplier
(supplierId INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
supplierName VARCHAR(30) NOT NULL,
supplierEmailAddress VARCHAR(35) NOT NULL,
supplierPhone VARCHAR(45) NOT NULL,
dateBecameSupplier VARCHAR(45) NOT NULL,
dateOfLastOrder VARCHAR(45) NOT NULL,
otherDetails VARCHAR(45) NOT NULL);


// Descending sort by the amount of orders per month
SELECT month_name, amount_of_orders
FROM year_statistics
ORDER BY amount_of_orders DESC;

// The sum of the amount of orders for one year
SELECT SUM(amount_of_orders) AS orders_per_year FROM year_statistics;

// The maximum amount of orders for one month
SELECT month_name, amount_of_orders FROM year_statistics
WHERE amount_of_orders = (SELECT MAX(amount_of_orders)
FROM year_statistics);

// How many orders each courier has delivered to a client
SELECT courier_id, COUNT(order_id)
From delivery_list
WHERE date_arrived IS NOT NULL
GROUP BY courier_id;

// Information about the customers who live in South district
SELECT * FROM Customers
WHERE district IN ('South');

// Information about the orders that have not been taken
SELECT * FROM delivery_list
WHERE taken NOT IN ('Yes');

// Find out products from the menu that have been ordered
SELECT menu_name FROM products
WHERE EXISTS
(SELECT * FROM orders_products WHERE orders_products.product_id = products.product_id);

// Find out products from the menu that have not been ordered
SELECT menu_name FROM products
WHERE NOT EXISTS
(SELECT * FROM orders_products WHERE orders_products.product_id = products.product_id);

// Find the frequency of districts among the clients
SELECT district
FROM customers
GROUP BY district
ORDER BY COUNT(district) DESC;

// Get a list of customers and couriers information
SELECT 'Customer' AS category, first_name, last_name, phone_number
FROM customers
UNION
SELECT 'Employee' AS category, first_name, last_name, phone_number
FROM courier_info;

// Check the details for each order
SELECT orders_products.order_id, products.menu_name, quantity, ROUND(price*quantity, 2) AS total_price
FROM orders_products
INNER JOIN products ON orders_products.product_id = products.product_id
ORDER BY order_id, quantity;

// The information about orders and delivery details
SELECT *, SEC_TO_TIME(TIMESTAMPDIFF(second, date_get, date_arrived))  AS time_of_delivery
FROM orders
NATURAL JOIN delivery_list;

// The table show us all the available districts for every courier on car
SELECT DISTINCT courier_info.courier_id, customers.district
FROM courier_info
CROSS JOIN customers WHERE courier_info.delivery_type = 'car'
ORDER BY courier_id;

// The information about a customer's name and their number of the order
SELECT customers.first_name, customers.last_name,  customers.phone_number, orders.order_id
FROM customers
LEFT JOIN orders ON customers.customer_id = orders.customer_id;